{%- set node_arch = ( node_item.infra.arch | default(cluster_architecture) ) -%}
{%- if node_arch in ["arm64", "aarch64"] -%}
{%- set migratable = "off" -%}
{%- else -%}
{%- set migratable = "on" -%}
{%- endif -%}
<domain type='kvm'>
  <name>{{ cluster_name }}-{{ node_item.name }}</name>
{% if node_arch not in ["arm64", "aarch64"] %}
  <genid/>
{% endif %}
  <metadata>
    <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
      <libosinfo:os id="http://fedoraproject.org/coreos/stable"/>
    </libosinfo:libosinfo>
  </metadata>
  <memory unit='MiB'>{{ node_item.vm.memory }}</memory>
  <currentMemory unit='MiB'>{{ node_item.vm.memory }}</currentMemory>
  <vcpu placement='static'>{{ node_item.vm.cpu_cores * node_item.vm.cpu_sockets }}</vcpu>
  <resource>
    <partition>/machine</partition>
  </resource>
  <os{% if libvirt_firmware_mode == "uefi" %} firmware='efi'{% endif %}>
{% if node_arch in ["arm64", "aarch64"] %}
    <type arch='aarch64' machine='virt-rhel9.0.0'>hvm</type>
{% else %}
    <type arch='x86_64' machine='q35'>hvm</type>
{% endif %}
    <boot dev='hd'/>
    <boot dev='cdrom'/>
    <firmware>
      <feature enabled='no' name='secure-boot'/>
    </firmware>
  </os>
  <features>
    <acpi/>
{% if node_arch not in ["arm64", "aarch64"] %}
    <apic/>
    <kvm>
      <hidden state='on'/>
    </kvm>
{% endif %}
{% if node_arch in ["arm64", "aarch64"] %}
    <gic version='3'/>
{% endif %}
  </features>
  <cpu mode='host-passthrough' check='none' migratable='{{ migratable }}'>
    <topology sockets='{{ node_item.vm.cpu_sockets }}' dies='1' cores='{{ node_item.vm.cpu_cores }}' threads='{{ node_item.vm.cpu_threads }}'/>
  </cpu>
  <clock offset='utc'>
    <timer name='rtc' tickpolicy='catchup'/>
    <timer name='pit' tickpolicy='delay'/>
    <timer name='hpet' present='no'/>
  </clock>
  <on_poweroff>restart</on_poweroff>
  <on_reboot>restart</on_reboot>
  <on_crash>destroy</on_crash>
{% if node_arch not in ["arm64", "aarch64"] %}
  <pm>
    <suspend-to-mem enabled='no'/>
    <suspend-to-disk enabled='no'/>
  </pm>
{% endif %}
  <iothreads>1</iothreads>
  <devices>
    <emulator>/usr/libexec/qemu-kvm</emulator>
{% for disk in node_item.vm.disks %}{% set letters = 'abcdefghijklmnopqrstuvwxyz' %}
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' cache='none' iothread="1" queues="8"/>
      <source file='{{ provider.configuration.libvirt_base_vm_path | default('/var/lib/libvirt/images') }}/{{ cluster_name }}-{{ node_item.name }}-{{ disk.name }}.qcow2' index='{{ loop.index + 1 }}'/>
      <backingStore/>
      <target dev='vd{{ letters[loop.index0] }}' bus='virtio'/>
      <alias name='virtio-disk{{ loop.index0 }}'/>
      <address type='pci' domain='0x0000' bus='0x0{{ loop.index0 + 6 }}' slot='0x00' function='0x0'/>
    </disk>
{% endfor %}
    <console type='pty' tty='/dev/pts/1'>
      <target type='serial' port='0'/>
      <alias name='serial0'/>
    </console>
{% if node_arch in ["arm64", "aarch64"] %}
    <tpm model='tpm-tis'>
      <backend type='emulator' version='2.0'/>
    </tpm>
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='{{ discovery_iso_path }}'/>
      <target dev='sda' bus='scsi'/>
      <readonly/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <serial type='pty'>
      <target type='system-serial' port='0'>
        <model name='pl011'/>
      </target>
    </serial>
    <channel type='unix'>
      <target type='virtio' name='org.qemu.guest_agent.0'/>
      <address type='virtio-serial' controller='0' bus='0' port='1'/>
    </channel>
    <input type='keyboard' bus='usb'>
      <address type='usb' bus='0' port='2'/>
    </input>
{% else %}
    <disk type='file' device='cdrom'>
      <driver name='qemu' type='raw'/>
      <source file='{{ discovery_iso_path }}' index='1'/>
      <backingStore/>
      <target dev='sda' bus='sata'/>
      <readonly/>
      <alias name='sata0-0-0'/>
      <address type='drive' controller='0' bus='0' target='0' unit='0'/>
    </disk>
    <controller type='sata' index='0'>
      <alias name='ide'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x1f' function='0x2'/>
    </controller>
    <serial type='pty'>
      <target type='isa-serial' port='0'>
        <model name='isa-serial'/>
      </target>
      <alias name='serial0'/>
    </serial>
    <input type='mouse' bus='ps2'>
      <alias name='input1'/>
    </input>
    <input type='keyboard' bus='ps2'>
      <alias name='input2'/>
    </input>
{% endif %}
    <controller type='scsi' index='0' model='virtio-scsi'>
      <alias name='scsi0'/>
      <address type='pci' domain='0x0000' bus='0x02' slot='0x00' function='0x0'/>
    </controller>
    <controller type='usb' index='0' model='qemu-xhci' ports='15'>
      <alias name='usb'/>
      <address type='pci' domain='0x0000' bus='0x03' slot='0x00' function='0x0'/>
    </controller>
    <controller type='pci' index='0' model='pcie-root'>
      <alias name='pcie.0'/>
    </controller>
    <controller type='pci' index='1' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='1' port='0x10'/>
      <alias name='pci.1'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x0' multifunction='on'/>
    </controller>
    <controller type='pci' index='2' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='2' port='0x11'/>
      <alias name='pci.2'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x1'/>
    </controller>
    <controller type='pci' index='3' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='3' port='0x12'/>
      <alias name='pci.3'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x2'/>
    </controller>
    <controller type='pci' index='4' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='4' port='0x13'/>
      <alias name='pci.4'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x3'/>
    </controller>
    <controller type='pci' index='5' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='5' port='0x14'/>
      <alias name='pci.5'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x4'/>
    </controller>
    <controller type='pci' index='6' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='6' port='0x15'/>
      <alias name='pci.6'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x5'/>
    </controller>
    <controller type='pci' index='7' model='pcie-root-port'>
      <model name='pcie-root-port'/>
      <target chassis='7' port='0x16'/>
      <alias name='pci.7'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x02' function='0x6'/>
    </controller>
    <controller type='virtio-serial' index='0'>
      <alias name='virtio-serial0'/>
      <address type='pci' domain='0x0000' bus='0x04' slot='0x00' function='0x0'/>
    </controller>
{% for iface in node_item.networking.interfaces %}
{% if iface.mac_address is defined %}
    <interface type='{{ provider.configuration.libvirt_network.type | default('network') }}'>
      <mac address='{{ iface.mac_address }}'/>
      <source {{ provider.configuration.libvirt_network.type | default('network') }}='{{ iface.libvirt_network | default(provider.configuration.libvirt_network.name) }}'/>
      <model type='{{ provider.configuration.libvirt_network.model | default('virtio') }}'/>
      <alias name='{{ iface.name }}'/>
    </interface>
{% endif %}
{% endfor %}
    <input type='tablet' bus='usb'>
      <alias name='input0'/>
      <address type='usb' bus='0' port='1'/>
    </input>
    <graphics type='vnc' port='-1' autoport='yes' listen='0.0.0.0'/>
    <video>
      <model type='virtio' heads='1' primary='yes'/>
      <alias name='video0'/>
      <address type='pci' domain='0x0000' bus='0x00' slot='0x01' function='0x0'/>
    </video>
{% if node_item.pci_devices is defined %}{% for device in node_item.pci_devices %}{% set expandSemi = device.split(":") %}
{% if expandSemi | length > 2 %}
{% set domainID = expandSemi[0] %}{% set busID = expandSemi[1] %}{% set slotID = expandSemi[2].split(".")[0] %}{% set functionID = expandSemi[2].split(".")[1] %}
{% else %}
{% set domainID = "0000" %}{% set busID = expandSemi[0] %}{% set slotID = expandSemi[1].split(".")[0] %}{% set functionID = expandSemi[1].split(".")[1] %}
{% endif %}
    <hostdev mode='subsystem' type='pci' managed='yes'>
      <driver name='vfio'/>
      <source>
        <address domain='0x{{ domainID }}' bus='0x{{ busID }}' slot='0x{{ slotID }}' function='0x{{ functionID }}'/>
      </source>
    </hostdev>
{% endfor %}{% endif %}
    <memballoon model='none'/>
    <rng model='virtio'>
      <backend model='random'>/dev/urandom</backend>
      <alias name='rng0'/>
      <address type='pci' domain='0x0000' bus='0x05' slot='0x00' function='0x0'/>
    </rng>
  </devices>
</domain>

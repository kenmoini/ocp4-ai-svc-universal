---
- name: Create an Assisted Installer provisioned OpenShift Cluster on mixed infrastructure
  hosts: localhost
  gather_facts: false

  module_defaults:
    kubernetes.core.k8s:
      validate_certs: false
    kubernetes.core.k8s_info:
      validate_certs: false

  vars:
    cluster_id: ""
    infraenv_id: ""
    cluster_status: ""
    deployment_name: ""
    compiled_uri_headers:
      User-Agent: AnsibleAutomation/4.2
    generated_asset_directory: "./.generated"
    detected_infra_nodes: false
    install_config_overrides: {}

    use_site_configs: false

    # Bare Metal Vars
    deploy_local_http_server: false
    http_server_port: 7654
    # ipmi_iso_url: http://raza.kemo.labs:{{ http_server_port }}/ocp_ai.iso

  tasks:
    - name: Read in variables
      when: not use_site_configs | bool
      ansible.builtin.include_vars:
        dir: vars
        extensions:
          - 'yaml'
          - 'yml'
      tags:
        - always

    - name: SITECONFIG - Read in default variables
      when: use_site_configs | bool
      ansible.builtin.include_vars:
        dir: defaults
        extensions:
          - 'yaml'
          - 'yml'
      tags:
        - always

    - name: SITECONFIG - Read in site configs
      when:
        - use_site_configs | bool
        - site_config_name is defined
      ansible.builtin.include_vars:
        dir: "site-config/{{ site_config_name }}"
        extensions:
          - 'yaml'
          - 'yml'
      tags:
        - always

    # =========================================================================================================================
    # Preflight
    # =========================================================================================================================

    - name: Initial Preflight Checks
      ansible.builtin.include_tasks:
        file: tasks/preflight/main.yaml
        apply:
          tags:
            - preflight
            - always
      tags:
        - preflight
        - always

    - name: Create generation directories
      ansible.builtin.file:
        state: directory
        path: "{{ path_item }}"
        mode: '0755'
      loop:
        - "{{ generated_asset_directory }}"
        - "{{ generated_asset_directory }}/bin/"
      loop_control:
        loop_var: path_item
      tags:
        - preflight
        - create_directories

    - name: Preflight Check - Check for OpenShift binaries
      ansible.builtin.include_tasks:
        file: tasks/preflight/check_ocp_binaries.yaml
        apply:
          tags:
            - preflight
            - binary_checks
      tags:
        - preflight
        - binary_checks

    - name: Preflight Check, AI Service - Set up Authentication Headers if needed
      when: assisted_service_authentication != "none"
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/setup_auth_headers.yaml
        apply:
          tags:
            - preflight
            - ai_svc_setup_headers
      tags:
        - preflight
        - ai_svc_setup_headers

    - name: Preflight Check, AI Service - Version Checks
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/query_openshift_versions.yaml
        apply:
          tags:
            - preflight
            - ai_svc_query_versions
      tags:
        - preflight
        - ai_svc_query_versions

    # =========================================================================================================================
    # Preflight Infrastructure Connection Tests
    # =========================================================================================================================

    - name: Preflight Check - Per cluster_node Bare Metal Connection Test
      when: node_item.infra.type == "baremetal"
      ansible.builtin.include_tasks:
        file: tasks/preflight/conntest_baremetal_nodes.yaml
        apply:
          tags:
            - preflight
            - conntests
            - conntest_baremetal
      tags:
        - preflight
        - conntests
        - conntest_baremetal
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
        label: "{{ node_item.name }}"

    - name: Preflight Check - Libvirt Connection Test
      when: provider.type == "libvirt"
      ansible.builtin.include_tasks:
        file: tasks/preflight/conntest_libvirt.yaml
        apply:
          tags:
            - preflight
            - conntests
            - conntest_libvirt
      tags:
        - preflight
        - conntests
        - conntest_libvirt
      loop: "{{ infrastructure_providers }}"
      loop_control:
        loop_var: provider

    - name: Preflight Check - Nutanix Connection Test
      when: provider.type == "nutanix"
      ansible.builtin.include_tasks:
        file: tasks/preflight/conntest_nutanix.yaml
        apply:
          tags:
            - preflight
            - conntests
            - conntest_nutanix
      tags:
        - preflight
        - conntests
        - conntest_nutanix
      loop: "{{ infrastructure_providers }}"
      loop_control:
        loop_var: provider

    - name: Preflight Check - VMWare Connection Test
      when: provider.type == "vsphere"
      ansible.builtin.include_tasks:
        file: tasks/preflight/conntest_vmware.yaml
        apply:
          tags:
            - preflight
            - conntests
            - conntest_vmware
      tags:
        - preflight
        - conntests
        - conntest_vmware
      loop: "{{ infrastructure_providers }}"
      loop_control:
        loop_var: provider

    # =========================================================================================================================
    # Cluster and InfraEnv checks
    # =========================================================================================================================

    - name: AI Service - Check for existing cluster
      ansible.builtin.uri:
        headers: "{{ compiled_uri_headers }}"
        url: "{{ assisted_service_endpoint }}/clusters"
        return_content: true
        method: GET
      register: read_clusters
      tags:
        - ai_svc
        - ai_svc_check_cluster
        - ai_svc_query_clusters

    - name: AI Service - Check for existing infraenvs
      ansible.builtin.uri:
        headers: "{{ compiled_uri_headers }}"
        url: "{{ assisted_service_endpoint }}/infra-envs"
        return_content: true
        method: GET
      register: read_infraenvs
      tags:
        - ai_svc
        - ai_svc_check_cluster
        - ai_svc_query_infraenvs

    - name: Set facts if cluster exists
      when: (cluster_item.base_dns_domain is defined) and ((cluster_item.base_dns_domain == cluster_domain) and (cluster_item.name == cluster_name))
      ansible.builtin.set_fact:
        cluster_id: "{{ cluster_item.id }}"
        cluster_status: "{{ cluster_item.status }}"
      loop: "{{ read_clusters.json }}"
      loop_control:
        loop_var: cluster_item
        label: "Cluster ID: {{ cluster_item.id }}"
      tags:
        - ai_svc
        - ai_svc_check_cluster
        - ai_svc_set_cluster

    - name: Set facts if infraenv exists
      when: (infraenv_item.cluster_id is defined) and (infraenv_item.cluster_id == cluster_id) and (infraenv_item.name == cluster_name)
      ansible.builtin.set_fact:
        infraenv_id: "{{ infraenv_item.id }}"
        infraenv_download_url: "{{ infraenv_item.download_url }}"
      loop: "{{ read_infraenvs.json }}"
      loop_control:
        loop_var: infraenv_item
        label: "InfraEnv ID: {{ infraenv_item.id }}"
      tags:
        - ai_svc
        - ai_svc_check_cluster
        - ai_svc_set_infraenv

    - name: Create cluster ID directory
      when: cluster_id != ""
      ansible.builtin.file:
        state: directory
        path: "{{ generated_asset_directory }}/{{ cluster_id }}"
        mode: '0755'
      tags:
        - ai_svc
        - ai_svc_check_cluster
        - ai_svc_create_cluster_dir

    # =========================================================================================================================
    # Cluster Definition
    # =========================================================================================================================

    - name: Create Cluster if it does not already exist
      when: cluster_id == ""
      block:
        - name: Set random var for this deployment json run
          ansible.builtin.set_fact:
            deployment_name: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

        - name: SSH Key Generation & Reading
          ansible.builtin.include_tasks:
            file: tasks/ssh_keys.yaml
            apply:
              tags:
                - ssh_keys
          tags:
            - ssh_keys

        - name: AI Service - Create the base cluster deployment definition
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/create_cluster.yaml
            apply:
              tags:
                - ai_svc
                - ai_svc_create_cluster
          tags:
            - ai_svc
            - ai_svc_create_cluster

    # =========================================================================================================================
    # Move resources from temporary deployment_id to cluster_id paths
    # =========================================================================================================================

    - name: Set Cluster Configuration
      when: deployment_name != ""
      block:

        - name: Create Cluster Asset Generation Directory
          ansible.builtin.file:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}"
            state: directory
            mode: '0755'
          tags:
            - create_cluster_dir

        - name: Copy deployment file into cluster directory
          ansible.builtin.copy:
            remote_src: true
            src: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            dest: "{{ generated_asset_directory }}/{{ cluster_id }}/deployment.json"
            mode: '0644'

        - name: Remove old named deployment.json
          ansible.builtin.file:
            path: "{{ generated_asset_directory }}/deployment-{{ deployment_name }}.json"
            state: absent

    - name: SSH Key Migration & Reread
      ansible.builtin.include_tasks:
        file: tasks/ssh_keys.yaml
        apply:
          tags:
            - ssh_keys
      tags:
        - ssh_keys

    # =========================================================================================================================
    # Create InfraEnv
    # =========================================================================================================================

    - name: AI Service - Create the infraenv if it does not already exist
      when: infraenv_id == ""
      tags:
        - ai_svc
        - ai_svc_create_infraenv
      block:
        - name: Create the infraenv deployment definition
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/create_infraenv.yaml
            apply:
              tags:
                - ai_svc
                - ai_svc_create_infraenv

    # =========================================================================================================================
    # Perform additional Assisted Installer Configuration steps
    # =========================================================================================================================

    - name: Do cluster configuration things
      when: cluster_status in ["insufficient", "ready", "pending-for-input", "adding-hosts"]
      tags:
        - ai_svc
        - ai_configure_cluster
      block:
        - name: AI Service - Inject extra manifests
          when: injected_manifests is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/preconfig_extra_manifests.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_inject_extra_manifests
          tags:
            - ai_svc_inject_extra_manifests

        - name: AI Service - Patch in Cluster Preconfiguration for Networking
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/preconfig_networking.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_preconfig_networking
          tags:
            - ai_svc_preconfig_networking

        - name: AI Service - Inject Cilium Networking Cluster Manifests
          when: cluster_network_type == "Cilium"
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/networking_cilium.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_inject_cilium_manifests
          tags:
            - ai_svc_inject_cilium_manifests

        - name: AI Service - Inject Calico Networking Cluster Manifests
          when: cluster_network_type == "Calico"
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/networking_calico.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_inject_calico_manifests
          tags:
            - ai_svc_inject_calico_manifests

        - name: AI Service - Add Additional Root CAs to the Discovery ISO
          when: additionalTrustBundle is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/add_additionalTrustBundle_to_infraenv.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_add_additionalTrustBundle_to_infraenv
          tags:
            - ai_svc_add_additionalTrustBundle_to_infraenv

        - name: AI Service - Patch the proxy configuration
          when: cluster_proxy is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/add_proxy_config.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_add_proxy_config
          tags:
            - ai_svc_add_proxy_config

        - name: AI Service - Patch the Mirror Registry configuration
          when: imageContentSources is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/configure_mirror_registry.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_configure_mirror_registry
          tags:
            - ai_svc_configure_mirror_registry

        - name: AI Service - Patch the NTP configuration
          when: ntp_sources is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/add_ntp_config.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_add_ntp_config
          tags:
            - ai_svc_add_ntp_config

        - name: Set the core user password
          when: core_user_password is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/set_core_user_pass_as_ico.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_set_core_user_password
          tags:
            - ai_svc_set_core_user_password

        - name: Patch the install-config overrides
          when: additionalTrustBundle is defined or cluster_proxy is defined or ntp_sources is defined or core_user_password is defined
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/set_install_config_overrides.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_set_install_config_overrides
          tags:
            - ai_svc_set_install_config_overrides

        - name: AI Service - Add Ignition Config Overrides
          when: (passwd_ico_object is defined) or (ignition_config_override_files is defined)
          # when: (passwd_ico_object is defined) or (ignition_config_override_files is defined and ignition_config_override_files | length > 0)
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/set_ignition_config_overrides.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_set_ignition_config_overrides
          tags:
            - ai_svc_set_ignition_config_overrides

        - name: AI Service - Reconfigure ISO Parameters
          ansible.builtin.include_tasks:
            file: tasks/ai-svc/configure_iso_params.yaml
            apply:
              tags:
                - ai_svc
                - ai_configure_cluster
                - ai_svc_configure_iso_params
          tags:
            - ai_svc_configure_iso_params

        #- name: Set the core user password
        #  when: core_user_password is defined
        #  block:
        #    - name: Reconfigure the Discovery ISO Ignition with the core user password
        #      ansible.builtin.include_tasks:
        #        file: tasks/ai-svc/set_core_user_password.yaml
        #        apply:
        #          tags:
        #            - ai_svc_set_core_user_password
        #
        #    - name: AI Service - Reconfigure ISO Parameters
        #      ansible.builtin.include_tasks:
        #        file: tasks/ai-svc/configure_iso_params.yaml
        #        apply:
        #          tags:
        #            - ai_svc_configure_iso_params
        #            - ai_svc_set_core_user_password
        #      tags:
        #        - ai_svc_configure_iso_params
        #  tags:
        #    - ai_svc_set_core_user_password

    # =========================================================================================================================
    # Downloading of the Discovery ISO
    # =========================================================================================================================

    - name: Download ISO if needed
      tags:
        - download_iso
      block:
        - name: Check for existing ISO
          ansible.builtin.stat:
            path: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
          register: iso_check
          tags:
            - check_for_local_iso

        # This is wrapped in a block/rescue cause evidently auth request limits can be reached
        - name: Download Discovery ISO
          when: not iso_check.stat.exists
          block:

            - name: Pull OpenShift ISO if needed
              tags:
                - ai_svc
                - ai_svc_download_iso
              ansible.builtin.get_url:
                headers: "{{ compiled_uri_headers }}"
                url: "{{ infraenv_download_url }}"
                dest: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
                mode: '0644'
              register: pull_result
              until: pull_result.status_code is defined and pull_result.status_code in [201, 200, 302, 304]
              retries: 10
              delay: 10

          rescue:
            - name: Pull info again
              ansible.builtin.uri:
                headers: "{{ compiled_uri_headers }}"
                url: "{{ assisted_service_endpoint }}/clusters/{{ cluster_id }}"
                return_content: true
                method: GET
                status_code: 200
                body_format: json
              register: cluster_install_statuscheck
              failed_when: false

            - name: Resync auth headers
              when: cluster_install_statuscheck.status == 401
              block:
                - name: Set up Authentication Headers if needed
                  when: assisted_service_authentication != "none"
                  ansible.builtin.include_tasks: tasks/ai-svc/setup_auth_headers.yaml

                - name: Pull OpenShift ISO if needed
                  tags:
                    - ai_svc
                    - ai_svc_download_iso
                  ansible.builtin.get_url:
                    headers: "{{ compiled_uri_headers }}"
                    url: "{{ infraenv_download_url }}"
                    dest: "{{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso"
                    mode: '0644'
                  register: pull_result
                  until: pull_result.status_code is defined and pull_result.status_code in [201, 200, 302, 304]
                  retries: 10
                  delay: 10

    # =========================================================================================================================
    # Local HTTP Server
    # =========================================================================================================================

    - name: Start a local HTTP Server to serve the ISO in the background
      when: deploy_local_http_server | bool
      ansible.builtin.include_tasks:
        file: tasks/infra-baremetal/start_local_server.yaml
        apply:
          tags:
            - start_local_server
      tags:
        - start_local_server

    # =========================================================================================================================
    # Infrastructure-specific Creation Tasks - Bare Metal
    # =========================================================================================================================

    - name: Create the list of Bare Metal targeted hosts
      when: node_item.infra.type == "baremetal"
      ansible.builtin.set_fact:
        baremetal_hosts: "{{ baremetal_hosts | default([]) + [node_item] }}"
        unique_baremetal_infra_providers: []
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_baremetal
        - infra_baremetal_create_hosts_list

    - name: Create the list of unique Bare Metal infrastructure providers
      when: baremetal_hosts is defined and baremetal_hosts | length > 0
      ansible.builtin.include_tasks:
        file: tasks/infra-baremetal/get_unique_providers.yaml
        apply:
          tags:
            - create_infra
            - infra_baremetal
            - infra_baremetal_create_infra_list
      loop: "{{ baremetal_hosts }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_baremetal
        - infra_baremetal_create_infra_list

    - name: Create the Bare Metal infrastructure
      when:
        - baremetal_hosts is defined
        - baremetal_hosts | length > 0
        - unique_baremetal_infra_providers | length > 0
      tags:
        - create_infra
        - infra_baremetal
        - infra_baremetal_create_infra
      block:
        # - name: Perform per Bare Metal Infrastructure Provider set up
        #   ansible.builtin.include_tasks: tasks/infra-baremetal/per_provider_setup.yaml
        #   loop: "{{ unique_baremetal_infra_providers }}"
        #   loop_control:
        #     loop_var: provider
        #     label: "Bare Metal Infrastructure Provider: {{ provider.name }}"
        #   tags:
        #     - infra_baremetal_per_provider_setup

        - name: Deploy Bare Metal infrastructure
          ansible.builtin.include_tasks:
            file: tasks/infra-baremetal/create.yaml
            apply:
              tags:
                - create_infra
                - infra_baremetal
                - infra_baremetal_create_infra
          loop: "{{ baremetal_hosts }}"
          loop_control:
            loop_var: node_item
            label: "Bare Metal Host: {{ node_item.name }}"

    - name: Wait for other bare metal hosts to be manually added
      when: baremetal_wait_for_manual_hosts is defined and baremetal_wait_for_manual_hosts | bool
      tags:
        - create_infra
        - infra_baremetal
        - infra_baremetal_wait_for_other_hosts
      ansible.builtin.pause:
        prompt: "\nDownload the ISO from the Assisted Installer Service and boot your bare metal hosts.\nIt can also be found locally at {{ generated_asset_directory }}/{{ cluster_id }}/ocp_ai.iso\n\nPress [ENTER] to continue"

    # =========================================================================================================================
    # Infrastructure-specific Creation Tasks - Libvirt
    # =========================================================================================================================

    - name: Create the list of Libvirt targeted hosts
      when: node_item.infra.type == "libvirt"
      ansible.builtin.set_fact:
        libvirt_hosts: "{{ libvirt_hosts | default([]) + [node_item] }}"
        unique_libvirt_infra_providers: []
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_libvirt
        - infra_libvirt_create_hosts_list

    - name: Create the list of unique Libvirt infrastructure providers
      when: libvirt_hosts is defined and libvirt_hosts | length > 0
      ansible.builtin.include_tasks:
        file: tasks/infra-libvirt/get_unique_providers.yaml
        apply:
          tags:
            - create_infra
            - infra_libvirt
            - infra_libvirt_create_infra_list
      loop: "{{ libvirt_hosts }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_libvirt
        - infra_libvirt_create_infra_list

    - name: Create the Libvirt infrastructure
      when:
        - libvirt_hosts is defined
        - libvirt_hosts | length > 0
        - unique_libvirt_infra_providers | length > 0
      tags:
        - create_infra
        - infra_libvirt
        - infra_libvirt_create_infra
      block:
        - name: Perform per Libvirt Infrastructure Provider set up
          ansible.builtin.include_tasks:
            file: tasks/infra-libvirt/per_provider_setup.yaml
            apply:
              tags:
                - create_infra
                - infra_libvirt
                - infra_libvirt_create_infra
                - infra_libvirt_per_provider_setup
          loop: "{{ unique_libvirt_infra_providers }}"
          loop_control:
            loop_var: provider
            label: "Libvirt Infrastructure Provider: {{ provider.name }}"
          tags:
            - infra_libvirt_per_provider_setup

        - name: Deploy Libvirt infrastructure
          ansible.builtin.include_tasks:
            file: tasks/infra-libvirt/create.yaml
            apply:
              tags:
                - create_infra
                - infra_libvirt
                - infra_libvirt_create_infra
          loop: "{{ libvirt_hosts }}"
          loop_control:
            loop_var: node_item
            label: "Libvirt Host: {{ node_item.name }}"

    # =========================================================================================================================
    # Infrastructure-specific Creation Tasks - Nutanix
    # =========================================================================================================================

    - name: Create the list of Nutanix targeted hosts
      when: node_item.infra.type == "nutanix"
      ansible.builtin.set_fact:
        nutanix_hosts: "{{ nutanix_hosts | default([]) + [node_item] }}"
        unique_nutanix_infra_providers: []
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_nutanix
        - infra_nutanix_create_hosts_list

    - name: Create the list of unique Nutanix infrastructure providers
      when: nutanix_hosts is defined and nutanix_hosts | length > 0
      ansible.builtin.include_tasks:
        file: tasks/infra-nutanix/get_unique_providers.yaml
        apply:
          tags:
            - create_infra
            - infra_nutanix
            - infra_nutanix_create_infra_list
      loop: "{{ nutanix_hosts }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_nutanix
        - infra_nutanix_create_infra_list

    - name: Create the Nutanix infrastructure
      when:
        - nutanix_hosts is defined
        - nutanix_hosts | length > 0
        - unique_nutanix_infra_providers | length > 0
      tags:
        - create_infra
        - infra_nutanix
        - infra_nutanix_create_infra
      block:
        - name: Perform per Nutanix Infrastructure Provider set up
          ansible.builtin.include_tasks:
            file: tasks/infra-nutanix/per_provider_setup.yaml
            apply:
              tags:
                - create_infra
                - infra_nutanix
                - infra_nutanix_create_infra
                - infra_nutanix_per_provider_setup
          loop: "{{ unique_nutanix_infra_providers }}"
          loop_control:
            loop_var: provider
            label: "Nutanix Infrastructure Provider: {{ provider.name }}"
          tags:
            - create_infra
            - infra_nutanix_per_provider_setup

        - name: Deploy Nutanix infrastructure
          ansible.builtin.include_tasks:
            file: tasks/infra-nutanix/create.yaml
            apply:
              tags:
                - create_infra
                - infra_nutanix
                - infra_nutanix_create_infra
          loop: "{{ nutanix_hosts }}"
          loop_control:
            loop_var: node_item
            label: "Nutanix Host: {{ node_item.name }}"

    # =========================================================================================================================
    # Infrastructure-specific Creation Tasks - vSphere
    # =========================================================================================================================

    - name: Create the list of vSphere targeted hosts
      when: node_item.infra.type == "vsphere"
      ansible.builtin.set_fact:
        vsphere_hosts: "{{ vsphere_hosts | default([]) + [node_item] }}"
        unique_vsphere_infra_providers: []
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_vsphere
        - infra_vsphere_create_hosts_list

    - name: Create the list of unique vSphere infrastructure providers
      when: vsphere_hosts is defined and vsphere_hosts | length > 0
      ansible.builtin.include_tasks:
        file: tasks/infra-vsphere/get_unique_providers.yaml
        apply:
          tags:
            - create_infra
            - infra_vsphere
            - infra_vsphere_create_infra_list
      loop: "{{ vsphere_hosts }}"
      loop_control:
        loop_var: node_item
      tags:
        - create_infra
        - infra_vsphere
        - infra_vsphere_create_infra_list

    - name: Create the vSphere infrastructure
      when:
        - vsphere_hosts is defined
        - vsphere_hosts | length > 0
        - unique_vsphere_infra_providers | length > 0
      tags:
        - create_infra
        - infra_vsphere
        - infra_vsphere_create_infra
      block:
        - name: Perform per vSphere Infrastructure Provider set up
          ansible.builtin.include_tasks:
            file: tasks/infra-vsphere/per_provider_setup.yaml
            apply:
              tags:
                - create_infra
                - infra_vsphere
                - infra_vsphere_create_infra
                - infra_vsphere_per_provider_setup
          loop: "{{ unique_vsphere_infra_providers }}"
          loop_control:
            loop_var: provider
            label: "vSphere Infrastructure Provider: {{ provider.name }}"
          tags:
            - create_infra
            - infra_vsphere_per_provider_setup

        - name: Deploy vSphere infrastructure
          ansible.builtin.include_tasks:
            file: tasks/infra-vsphere/create.yaml
            apply:
              tags:
                - create_infra
                - infra_vsphere
                - infra_vsphere_create_infra
                - infra_vsphere_deploy_infra
          loop: "{{ vsphere_hosts }}"
          loop_control:
            loop_var: node_item
            label: "vSphere Host: {{ node_item.name }}"
          tags:
            - create_infra
            - infra_vsphere_deploy_infra

    # =========================================================================================================================
    # AI Service - Configure Cluster
    # =========================================================================================================================

    - name: Wait for hosts to report into the Assisted Installer service
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/check_for_hosts.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_wait_for_hosts
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_wait_for_hosts

    - name: Set Host Ignition Configs
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/set_host_pointer_ignition.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_set_host_pointer_ignition
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_set_host_pointer_ignition

    - name: Set Host Names and Roles for Standard HA OpenShift Cluster
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/set_host_names_roles.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_set_host_names_roles
      # when: cluster_type == "Standard"
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_set_host_names_roles

    - name: Set Network VIPs
      when: cluster_type != "SNO"
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/set_vips.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_set_vips
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_set_vips

    # =========================================================================================================================
    # AI Service - Start Cluster Install
    # =========================================================================================================================

    - name: Check to make sure the hosts are ready and the cluster can be installed
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/check_install_ready.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_check_install_ready
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_check_install_ready

    - name: Start the Cluster installation
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/start_install.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_start_install
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_start_install

    # =========================================================================================================================
    # AI Service - Wait for Installation to complete
    # =========================================================================================================================

    - name: Wait for the cluster to be fully installed
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/check_cluster_install_finished.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_post_infra
            - ai_svc_wait_for_cluster_install
      tags:
        - ai_svc
        - ai_svc_post_infra
        - ai_svc_wait_for_cluster_install

    - name: Pull cluster credentials
      ansible.builtin.include_tasks:
        file: tasks/ai-svc/query_cluster_credentials.yaml
        apply:
          tags:
            - ai_svc
            - ai_svc_pull_cluster_credentials
      tags:
        - ai_svc
        - ai_svc_pull_cluster_credentials

    # =========================================================================================================================
    # OpenShift Cluster - Post-Deployment Tasks
    # =========================================================================================================================

    - name: Check to see if there are any infra nodes defined
      when: node_item.type in ["infra-node", "infra"]
      ansible.builtin.set_fact:
        detected_infra_nodes: true
      loop: "{{ cluster_nodes }}"
      loop_control:
        loop_var: node_item
      tags:
        - post_deploy
        - infra_configuration

    - name: Log into the cluster with a Kubeconfig file
      when: cluster_kubeadmin_password is not defined
      tags:
        - post_deploy
      block:
        - name: Set the kubeconfig env
          ansible.builtin.set_fact:
            active_kc: "{{ generated_asset_directory }}/{{ cluster_id }}/kubeconfig"

    - name: Log into the cluster with a Kubeadmin password
      when: cluster_kubeadmin_password is defined
      tags:
        - post_deploy
      block:
        - name: Set the kubeconfig env
          ansible.builtin.set_fact:
            active_kc: ""
            login_cmd: |-
              {{ oc_binary }} login --insecure-skip-tls-verify=true '{{ cluster_api_url }}' --password={{ cluster_kubeadmin_password }} --username={{ cluster_kubeadmin_username }}
          no_log: true

        - name: Run the login
          ansible.builtin.shell:
            cmd: "{{ login_cmd }}"
          environment:
            KUBECONFIG: "{{ active_kc }}"
          register: cluster_auth_status
          until: (cluster_auth_status.rc == 0)
          no_log: true
          retries: 2
          delay: 20

    - name: Log into the cluster
      when: cluster_kubeadmin_password is not defined
      tags:
        - post_deploy
      ansible.builtin.shell:
        cmd: "{{ oc_binary }} whoami"
      environment:
        KUBECONFIG: "{{ active_kc }}"
      register: cluster_auth_status
      until: (cluster_auth_status.rc == 0)
      no_log: false
      retries: 120
      delay: 20

    - name: Set infrastructure node configuration
      when: detected_infra_nodes | bool
      ansible.builtin.include_tasks:
        file: tasks/post-deploy/configure-infra-nodes.yaml
        apply:
          tags:
            - post_deploy
            - infra_configuration
      tags:
        - post_deploy
        - infra_configuration

    - name: Post-cluster deployment extra role driven workloads
      when: extra_roles is defined and extra_roles | length > 0
      ansible.builtin.include_tasks:
        file: tasks/post-deploy/extra_roles.yaml
        apply:
          tags:
            - post_deploy
      tags:
        - post_deploy

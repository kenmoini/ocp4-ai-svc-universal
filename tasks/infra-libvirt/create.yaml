---
# ===========================================================================
# Get the Infrastructure Provider for this host
# ===========================================================================

- name: Get the infrastructure provider for this host - {{ node_item.name }}
  ansible.builtin.include_tasks: "target_infra_credential.yaml"

# ===========================================================================
# Set Per VM Metadata
# ===========================================================================

- name: Set extra facts - ssh_key_option - {{ node_item.name }}
  when: provider.credentials.libvirt_ssh_key_path is defined
  ansible.builtin.set_fact:
    ssh_key_option: "&keyfile={{ provider.credentials.libvirt_ssh_key_path }}"

- name: Set extra facts - user_target - {{ node_item.name }}
  when: provider.credentials.libvirt_username is defined
  ansible.builtin.set_fact:
    user_target: "{{ provider.credentials.libvirt_username }}@"

- name: Set the Libvirt url - {{ node_item.name }}
  ansible.builtin.set_fact:
    libvirt_uri: "{{ provider.credentials.libvirt_transport | default('qemu') }}://{{ user_target | default('') }}{{ provider.credentials.libvirt_endpoint | default('') }}/system{{ provider.credentials.libvirt_options | default('?no_verify=1&socket=/var/run/libvirt/libvirt-sock') }}{{ ssh_key_option | default('') }}"

- name: Set the discovery_iso_path - {{ node_item.name }}
  when: cluster_id is defined
  ansible.builtin.set_fact:
    discovery_iso_path: "{{ provider.configuration.libvirt_base_iso_path | default('/var/lib/libvirt/images') }}/ocp_ai-{{ cluster_id }}.iso"

- name: Set the empty discovery_iso_path - {{ node_item.name }}
  when: cluster_id is not defined
  ansible.builtin.set_fact:
    discovery_iso_path: ""

# ===========================================================================
# Detach PCI Devices
# ===========================================================================

- name: Detach PCI Devices for the VM - {{ node_item.name }}
  when: node_item.pci_devices is defined
  ansible.builtin.include_tasks: detach_devices.yaml
  loop: "{{ node_item.pci_devices }}"
  loop_control:
    loop_var: device_item
  tags:
    - infra_libvirt
    - infra_libvirt_detach_pci

# ===========================================================================
# Create VM Disks
# ===========================================================================

- name: Create disks for the VM - {{ node_item.name }}
  ansible.builtin.include_tasks: create_disks.yaml
  loop: "{{ node_item.vm.disks }}"
  loop_control:
    loop_var: disk_item
  tags:
    - infra_libvirt
    - infra_libvirt_create_disks

# ===========================================================================
# Create & Boot VM
# ===========================================================================

- name: Template the VM XML - {{ node_item.name }}
  ansible.builtin.template:
    src: kvm_libvirt_vm.xml.j2
    dest: "{{ generated_asset_directory }}/{{ cluster_id }}/kvm-{{ node_item.name }}.xml"
    mode: '0644'
  tags:
    - infra_libvirt
    - infra_libvirt_create_vm

- name: Create the VM - {{ node_item.name }}
  community.libvirt.virt:
    command: define
    xml: "{{ lookup('template', 'kvm_libvirt_vm.xml.j2') }}"
    uri: "{{ libvirt_uri }}"
  tags:
    - infra_libvirt
    - infra_libvirt_create_vm

- name: Boot the VM - {{ node_item.name }}
  community.libvirt.virt:
    name: "{{ cluster_name }}-{{ node_item.name }}"
    state: running
    uri: "{{ libvirt_uri }}"
  tags:
    - infra_libvirt
    - infra_libvirt_boot_vm

# ===========================================================================
# Reset facts for next item in the loop
# ===========================================================================

- name: Reset facts
  ansible.builtin.set_fact:
    libvirt_uri: ""
    ssh_key_option: ""
    user_target: ""

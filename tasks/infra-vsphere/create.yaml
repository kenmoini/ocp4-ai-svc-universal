---
# ===========================================================================
# Get the Infrastructure Provider for this host
# ===========================================================================

- name: Get the infrastructure provider for this host
  ansible.builtin.include_tasks: "target_infra_credential.yaml"

# ===========================================================================
# Assemble VM Metadata
# ===========================================================================

- name: Setup VMWare disk dictionary - {{ node_item.name }}
  ansible.builtin.set_fact:
    disks: "{{ disks | default([]) + [{'size_gb': disk_item.size, 'type': type | default('thin')}] }}"
  loop: "{{ node_item.vm.disks }}"
  loop_control:
    loop_var: disk_item
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_vm_metadata
    - vmware_vm_metadata_disks

- name: Setup VMWare network dictionary - {{ node_item.name }}
  when: iface_item.mac_address is defined
  ansible.builtin.set_fact:
    networks: "{{ networks | default([]) + [{'name': iface_item.vcenter_network | default(provider.configuration.vcenter_network), 'device_type': 'vmxnet3', 'mac': iface_item.mac_address | default('')}] }}"
  loop: "{{ node_item.networking.interfaces }}"
  loop_control:
    loop_var: iface_item
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_vm_metadata
    - vmware_vm_metadata_networks

- name: Setup VMWare CDROM dictionary - {{ node_item.name }}
  when: cluster_id is defined
  ansible.builtin.set_fact:
    cdrom:
      - controller_number: 0
        unit_number: 0
        state: present
        type: iso
        iso_path: "[{{ provider.configuration.vcenter_datastore }}] {{ provider.configuration.vcenter_iso_dir }}/ocp-ai-{{ cluster_id }}.iso"

- name: Setup empty VMWare CDROM dictionary - {{ node_item.name }}
  when: cluster_id is not defined
  ansible.builtin.set_fact:
    cdrom:
      - controller_number: 0
        unit_number: 0
        state: present
        type: none

# ===========================================================================
# Create VM
# ===========================================================================

- name: Create VM - {{ node_item.name }}
  community.vmware.vmware_guest:
    hostname: '{{ provider.credentials.vcenter_hostname }}'
    username: '{{ provider.credentials.vcenter_username }}'
    password: '{{ provider.credentials.vcenter_password }}'
    validate_certs: '{{ provider.credentials.vcenter_verify_ssl }}'
    datacenter: "{{ provider.configuration.vcenter_datacenter }}"
    datastore: "{{ provider.configuration.vcenter_datastore }}"
    cluster: "{{ provider.configuration.vcenter_cluster }}"
    name: "{{ cluster_name }}-{{ node_item.name }}"
    folder: "{{ cluster_folder_name }}"
    guest_id: coreos64Guest
    state: present
    disk: "{{ disks }}"
    hardware:
      memory_mb: "{{ node_item.vm.memory }}"
      num_cpu_cores_per_socket: "{{ node_item.vm.cpu_cores }}"
      num_cpus: "{{ (node_item.vm.cpu_sockets | int * node_item.vm.cpu_cores | int) }}"
      hotadd_cpu: true
      hotadd_memory: true
      version: "{{ vcenter_hardware_version | int }}"
      nested_virt: "{{ vsphere_nested_virt | default(False) }}"
      boot_firmware: "{{ vsphere_boot_firmware | default('efi') }}"
    cdrom: "{{ cdrom }}"
    networks: "{{ networks }}"
  tags:
    - skip_ansible_lint # ignore the disk check, it works fine, but ansible-lint thinks the variable is a string
    - vmware_tasks
    - vmware_create_vms
    - vmware_configure_vm_hardware

- name: Set diskUUID configuration for the VM
  community.vmware.vmware_guest:
    hostname: '{{ provider.credentials.vcenter_hostname }}'
    username: '{{ provider.credentials.vcenter_username }}'
    password: '{{ provider.credentials.vcenter_password }}'
    validate_certs: '{{ provider.credentials.vcenter_verify_ssl }}'
    datacenter: "{{ provider.configuration.vcenter_datacenter }}"
    datastore: "{{ provider.configuration.vcenter_datastore }}"
    cluster: "{{ provider.configuration.vcenter_cluster }}"
    name: "{{ cluster_name }}-{{ node_item.name }}"
    folder: "{{ cluster_folder_name }}"
    resource_pool: "{{ node_item.vm.resource_pool | default(omit) }}"
    advanced_settings:
      - key: disk.EnableUUID
        value: "TRUE"
    wait_for_customization: true
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_configure_vm_hardware

- name: Get the VM Information
  community.vmware.vmware_guest_info:
    hostname: '{{ provider.credentials.vcenter_hostname }}'
    username: '{{ provider.credentials.vcenter_username }}'
    password: '{{ provider.credentials.vcenter_password }}'
    validate_certs: '{{ provider.credentials.vcenter_verify_ssl }}'
    datacenter: "{{ provider.configuration.vcenter_datacenter }}"
    name: "{{ cluster_name }}-{{ node_item.name }}"
  register: vm_guest_info
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_configure_vm_hardware

- name: Debug vm_guest_info
  ansible.builtin.debug:
    msg: "{{ vm_guest_info }}"
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_configure_vm_hardware

- name: Power On VM - {{ node_item.name }}
  community.vmware.vmware_guest:
    hostname: '{{ provider.credentials.vcenter_hostname }}'
    username: '{{ provider.credentials.vcenter_username }}'
    password: '{{ provider.credentials.vcenter_password }}'
    validate_certs: '{{ provider.credentials.vcenter_verify_ssl }}'
    datacenter: "{{ provider.configuration.vcenter_datacenter }}"
    datastore: "{{ provider.configuration.vcenter_datastore }}"
    cluster: "{{ provider.configuration.vcenter_cluster }}"
    name: "{{ cluster_name }}-{{ node_item.name }}"
    folder: "{{ cluster_folder_name }}"
    state: powered-on
  tags:
    - vmware_tasks
    - vmware_create_vms
    - vmware_boot_vm

# ===========================================================================
# Cleanup
# ===========================================================================

- name: Resetting Facts - {{ node_item.name }}
  ansible.builtin.set_fact:
    disks: []
    named_provider: {}
    networks: []
    provider: {}
    provider_list: {}
    vmware_check_for_iso: {}

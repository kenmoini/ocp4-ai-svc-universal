---

- name: Explode the desired OpenShift version and set the set_version_ex fact
  ansible.builtin.set_fact:
    set_version_ex: "{{ cluster_version.split('.') }}"
    version_options: []
    sorted_version_options: []
    version_found: false

- name: Query versions from Assisted Installer API
  ansible.builtin.uri:
    headers: "{{ compiled_uri_headers }}"
    url: "{{ assisted_service_endpoint }}/openshift-versions"
    return_content: true
    method: GET
    status_code: 200
    body_format: json
  register: ocp_versions

- name: Debug
  ansible.builtin.debug:
    msg: "{{ (ocp_versions.json).keys() | list }}"

- name: Setup combined info facts from the Assisted Installer API
  ansible.builtin.set_fact:
    discovered_versions: "{{ ocp_versions.json | dict2items }}"
    ai_svc_versions: "{{ (ocp_versions.json).keys() | list }}"

- name: Build the version_options
  ansible.builtin.set_fact:
    version_options: "{{ version_options + [{'key': ver_item.key, 'msg': ver_item.key + ' : ' + ver_item.value.display_name + (' - Developer preview release' if ver_item.value.support_level != 'production' else ' - Production') + ' [' + (ver_item.value.cpu_architectures | join(', ')) + ']'}] }}"
  loop: "{{ discovered_versions }}"
  loop_control:
    loop_var: ver_item
    label: "{{ ver_item.key }}"

- name: Set sorted_version_options
  ansible.builtin.set_fact:
    sorted_version_options: "{{ sorted_version_options + [ver_item.msg] }}"
  loop: "{{ version_options }}"
  loop_control:
    loop_var: ver_item

- name: List all the discovered and sorted versions
  ansible.builtin.debug:
    msg: "{{ sorted_version_options }}"

# if the desired version matches the key of the discovered versions
# then we're pretty much done

- name: Versions matched
  when: cluster_version | string in ai_svc_versions
  block:
    - name: Set the desired cluster version if the desired cluster_version is found in the available version keys from OAS
      ansible.builtin.set_fact:
        desired_cluster_version: "{{ cluster_version | string }}"
        version_found: true

# if the desired version does not match the key of the discovered versions
# then we need to check the display_name

- name: Proceed to check for matching display_names
  when: cluster_version | string not in ai_svc_versions
  block:

    - name: Set version_found to true if found in the display_names
      when: cluster_version | string in ver_item.value.display_name
      ansible.builtin.set_fact:
        version_found: true
        desired_cluster_version: "{{ ver_item.key }}"
      loop: "{{ discovered_versions }}"
      loop_control:
        loop_var: ver_item
        label: "{{ ver_item.key }}"

- name: Fail if the desired version is not available
  when: not version_found
  ansible.builtin.fail:
    msg: "The desired version '{{ cluster_version }}' is not available from the Assisted Installer Service!"

- name: Assert that the desired version is supported by the AI Service
  ansible.builtin.assert:
    that:
      - desired_cluster_version | string in ai_svc_versions
    fail_msg: |
      desired_cluster_version '{{ desired_cluster_version | string }}' from cluster_version '{{ cluster_version }}' is not serviced by this Assisted Installer Service!
      Supported versions:
      {{ ai_svc_versions }}
    success_msg: "desired_cluster_version '{{ desired_cluster_version | string }}' from cluster_version '{{ cluster_version }}' is serviced by this Assisted Installer Service!"

- name: Assert that SNO mode is supported by the desired version
  when: cluster_type == "SNO"
  ansible.builtin.assert:
    that:
      - cluster_version is version('4.8', '>=')
    fail_msg: desired_cluster_version '{{ desired_cluster_version | string }}' from cluster_version '{{ cluster_version }}' is not able to deploy as a Single Node OpenShift cluster - only available in 4.8+"
    success_msg: "desired_cluster_version '{{ desired_cluster_version | string }}' from cluster_version '{{ cluster_version }}' is able to deploy as a Single Node OpenShift cluster!"

- name: Set supporting facts now that we have the intended version
  ansible.builtin.set_fact:
    ai_svc_version: "{{ (ocp_versions.json)[desired_cluster_version | string] }}"
    cluster_full_version: "{{ (ocp_versions.json)[desired_cluster_version | string].display_name }}"

- name: Display the version facts that are used to deploy
  ansible.builtin.debug:
    msg:
      - "ai_svc_version: {{ ai_svc_version }}"
      - "cluster_full_version: {{ cluster_full_version }}"
      - "cluster_version: {{ cluster_version }}"
      - "desired_cluster_version: {{ desired_cluster_version }}"
